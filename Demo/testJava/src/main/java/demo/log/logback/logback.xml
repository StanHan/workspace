<?xml version="1.0" encoding="UTF-8"?>

<!-- scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。 -->
<!-- scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 -->
<!-- debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration scan="true" scanPeriod="60 seconds" debug="false">

  <!-- property：用来定义变量值的标签，有两个属性，name和value；其中name的值是变量的名称，value的值时变量定义的值。通过<property>定义的值会被插入到logger上下文中。定义变量后，可以使“${}”来使用变量。 -->
  <property name="APP_Name" value="testJava" />
  <property name="log.dir" value="G:/logs" />

  <!-- timestamp：获取时间戳字符串：两个属性, key:标识此<timestamp> 的名字；datePattern：设置将当前时间（解析配置文件的时间）转换为字符串的模式，遵循Java.txt.SimpleDateFormat的格式。 -->
  <timestamp key="bySecond" datePattern="yyyyMMdd'T'HHmmss" />

  <!-- contextName：设置上下文名称：每个logger都关联到logger上下文，默认上下文名称为“default”。但可以使用<contextName>设置成其他名字，用于区分不同应用程序的记录。一旦设置，不能修改。 -->
  <contextName>${APP_Name}</contextName>

  <!-- 控制台输出 -->
  <appender name="Console" class="ch.qos.logback.core.ConsoleAppender">
    <encoder>
      <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符 -->
      <pattern>%date [%thread] %-5level %logger{80} - %msg%n</pattern>
    </encoder>
  </appender>

  <!-- 时间滚动输出 level为 DEBUG 日志 -->
  <appender name="FILE_DEBUG" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <!-- 级别过滤器 -->
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <!-- 设置过滤级别 -->
      <level>DEBUG</level>
      <!-- 用于配置符合过滤条件的操作 -->
      <onMatch>ACCEPT</onMatch>
      <!-- 用于配置不符合过滤条件的操作 -->
      <onMismatch>DENY </onMismatch>
    </filter>

    <Encoding>UTF-8</Encoding>

    <File>${log.dir}/debug/debug.log</File>

    <!-- 根据时间来制定滚动策略 -->
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <FileNamePattern>${log.dir}/debug.%d{yyyy-MM-dd}.log</FileNamePattern>
      <!-- 多久后自动清楚旧的日志文件,单位:月 -->
      <MaxHistory>1</MaxHistory>
      <TimeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
        <!-- 默认值是 10MB,文档最大值 -->
        <MaxFileSize>2MB</MaxFileSize>
      </TimeBasedFileNamingAndTriggeringPolicy>
    </rollingPolicy>

    <encoder>
      <pattern>%d [%thread] %-5level %logger{80} - %msg%n</pattern>
    </encoder>
  </appender>

  <!-- INFO级别 -->
  <appender name="FILE_INFO" class="ch.qos.logback.core.rolling.RollingFileAppender">

    <!-- 级别过滤器 -->
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <!-- 设置过滤级别 -->
      <level>INFO</level>
      <!-- 用于配置符合过滤条件的操作 -->
      <onMatch>ACCEPT</onMatch>
      <!-- 用于配置不符合过滤条件的操作 -->
      <onMismatch>DENY</onMismatch>
    </filter>
    <Encoding>UTF-8</Encoding>
    <File>${log.dir}/info/info.log</File>
    <!-- 根据时间来制定滚动策略 -->
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <FileNamePattern>
        ${log.dir}/info/info.%d{yyyy-MM-dd}.%i.log
      </FileNamePattern>
      <!-- 多久后自动清楚旧的日志文件,单位:月 -->
      <MaxHistory>1</MaxHistory>
      <TimeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
        <!-- 默认值是 10MB,文档最大值 -->
        <MaxFileSize>2MB</MaxFileSize>
      </TimeBasedFileNamingAndTriggeringPolicy>
    </rollingPolicy>

    <encoder>
      <Pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{50} - %msg%n</Pattern>
    </encoder>
  </appender>


  <!-- WARN级别 -->
  <appender name="FILE_WARN" class="ch.qos.logback.core.rolling.RollingFileAppender">

    <!-- 级别过滤器 -->
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <!-- 设置过滤级别 -->
      <level>WARN</level>
      <!-- 用于配置符合过滤条件的操作 -->
      <onMatch>ACCEPT</onMatch>
      <!-- 用于配置不符合过滤条件的操作 -->
      <onMismatch>DENY</onMismatch>
    </filter>
    <Encoding>UTF-8</Encoding>
    <File>${log.dir}/warn/warn.log</File>
    <!-- 根据时间来制定滚动策略 -->
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <FileNamePattern>
        ${log.dir}/warn/warn.%d{yyyy-MM-dd}.%i.log
      </FileNamePattern>
      <!-- 多久后自动清楚旧的日志文件,单位:月 -->
      <MaxHistory>1</MaxHistory>
      <TimeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
        <!-- 默认值是 10MB,文档最大值 -->
        <MaxFileSize>2MB</MaxFileSize>
      </TimeBasedFileNamingAndTriggeringPolicy>
    </rollingPolicy>

    <encoder>
      <Pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{50} - %msg%n</Pattern>
    </encoder>
  </appender>

  <!-- ERROR级别 -->
  <appender name="FILE_ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">

    <!-- 级别过滤器 -->
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <!-- 设置过滤级别 -->
      <level>ERROR</level>
      <!-- 用于配置符合过滤条件的操作 -->
      <onMatch>ACCEPT</onMatch>
      <!-- 用于配置不符合过滤条件的操作 -->
      <onMismatch>DENY</onMismatch>
    </filter>
    <Encoding>UTF-8</Encoding>
    <File>${log.dir}/error/error.log</File>
    <!-- 根据时间来制定滚动策略 -->
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <FileNamePattern>
        ${log.dir}/error/error.%d{yyyy-MM-dd}.%i.log
      </FileNamePattern>
      <!-- 多久后自动清楚旧的日志文件,单位:月 -->
      <MaxHistory>1</MaxHistory>
      <TimeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
        <!-- 默认值是 10MB,文档最大值 -->
        <MaxFileSize>2MB</MaxFileSize>
      </TimeBasedFileNamingAndTriggeringPolicy>
    </rollingPolicy>

    <encoder>
      <Pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{50} - %msg%n</Pattern>
    </encoder>
  </appender>

  <!-- 特定过滤含有某字符串的日志 -->
  <appender name="耗时" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <filter class="ch.qos.logback.core.filter.EvaluatorFilter">
      <evaluator>
        <expression>message.contains("耗时")</expression>
      </evaluator>
      <onMatch>ACCEPT</onMatch>
      <onMismatch>DENY</onMismatch>
    </filter>

    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <FileNamePattern>G:/logs/contains.%d{yyyy-MM-dd}.log
      </FileNamePattern>
      <MaxHistory>30</MaxHistory>
    </rollingPolicy>

    <encoder>
      <pattern>%date [%thread] %-5level %logger{80} - %msg%n</pattern>
    </encoder>
  </appender>

  <!-- 数据库输出 -->
  <appender name="DB" class="ch.qos.logback.classic.db.DBAppender">
    <connectionSource class="ch.qos.logback.core.db.DriverManagerConnectionSource">
      <driverClass>com.mysql.jdbc.Driver</driverClass>
      <url>jdbc:mysql://localhost:3306/test</url>
      <user>root</user>
      <password>root</password>
    </connectionSource>
  </appender>

  <appender name="monitor" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <File>${log.dir}/monitor.log</File>
    <encoder>
      <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} : %m%n</pattern>
    </encoder>
    <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
      <level>INFO</level>
    </filter>
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <fileNamePattern>${log.dir}/sensitive.log.%d{yyyy-MM-dd}</fileNamePattern>
    </rollingPolicy>
  </appender>

  <!-- logger:用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender>。<loger>仅有一个name属性，一个可选的level和一个可选的addtivity属性。 -->
  <!-- name:用来指定受此loger约束的某一个包或者具体的某一个类。 -->
  <!-- level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。如果未设置此属性，那么当前loger将会继承上级的级别。 -->
  <!-- additivity:是否向上级loger传递打印信息。默认是true。 -->
  <!-- <loger>可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个loger。 -->
  <logger name="monitor" additivity="false" level="INFO">
    <span style="white-space:pre">
    </span>
    <appender-ref ref="monitor" />
    <span style="white-space:pre">
    </span>
  </logger>

  <!-- 控制java下面包的打印,没设置等级,将继承上级root的等级 -->
  <logger name="demo.java" />
  <logger name="java.sql.Connection" level="DEBUG" />
  <logger name="java.sql.Statement" level="DEBUG" />
  <logger name="com.ibatis" level="DEBUG" />
  <logger name="com.ibatis.common.jdbc.SimpleDataSource" level="DEBUG" />
  <logger name="com.ibatis.common.jdbc.ScriptRunner" level="DEBUG" />
  <logger name="com.ibatis.sqlmap.engine.impl.SqlMapClientDelegate" level="DEBUG" />
  <logger name="com.danga.MemCached" level="DEBUG" />
  <logger name="org.springframework.test" level="DEBUG" />
  <logger name="org.apache.struts2" level="DEBUG" />



  <!-- the level of the root level is set to DEBUG by default. -->
  <!-- <root>也是<logger>元素，但是它是根logger。只有一个level属性，应为已经被命名为"root". -->
  <!-- level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，不能设置为INHERITED或者同义词NULL。默认是DEBUG。 -->
  <root level="DEBUG">
    <!-- <root>可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个logger。 -->

    <appender-ref ref="monitor" />
    <appender-ref ref="Console" />
    <appender-ref ref="FILE_DEBUG" />
    <appender-ref ref="FILE_INFO" />
    <appender-ref ref="FILE_WARN" />
    <appender-ref ref="FILE_ERROR" />
    <appender-ref ref="耗时" />
    <appender-ref ref="DB" />
  </root>

</configuration>