package demo.java;

/**
 * <h1>Java内存模型即Java Memory Model，简称JMM</h1>
 * <p>
 * JMM定义了Java 虚拟机(JVM)在计算机内存(RAM)中的工作方式。JVM是整个计算机虚拟模型，所以JMM是隶属于JVM的。 Java内存模型定义了多线程之间共享变量的可见性以及如何在需要的时候对共享变量进行同步。
 * JMM决定一个线程对共享变量的写入何时对另一个线程可见。从抽象的角度来看，JMM定义了线程和主内存之间的抽象关系： 线程之间的共享变量存储在主内存（main memory）中，每个线程都有一个私有的本地内存（local
 * memory）， 本地内存中存储了该线程以读/写共享变量的副本。 本地内存是JMM的一个抽象概念，并不真实存在。它涵盖了缓存，写缓冲区，寄存器以及其他的硬件和编译器优化。
 * 
 */
public interface JavaMemoryModel {
    /**
     * <h2>JVM对Java内存模型的实现</h2>
     * <p>
     * 在JVM内部，Java内存模型把内存分成了两部分：线程栈区和堆区。
     * 
     * JVM中运行的每个线程都拥有自己的线程栈，线程栈包含了当前线程执行的方法调用相关信息，我们也把它称作调用栈。 随着代码的不断执行，调用栈会不断变化。
     * 线程栈还包含了当前方法的所有本地变量信息。一个线程只能读取自己的线程栈，也就是说，线程中的本地变量对其它线程是不可见的。
     * 即使两个线程执行的是同一段代码，它们也会各自在自己的线程栈中创建本地变量，因此，每个线程中的本地变量都会有自己的版本。
     * 所有原始类型(boolean,byte,short,char,int,long,float,double)的本地变量都直接保存在线程栈当中，对于它们的值各个线程之间都是独立的。
     * 对于原始类型的本地变量，一个线程可以传递一个副本给另一个线程，当它们之间是无法共享的。
     * 
     * 堆区包含了Java应用创建的所有对象信息，不管对象是哪个线程创建的，其中的对象包括原始类型的封装类（如Byte、Integer、Long等等）。不管对象是属于一个成员变量还是方法中的本地变量，它都会被存储在堆区。
     * 
     * 一个本地变量如果是原始类型，那么它会被完全存储到栈区。 一个本地变量也有可能是一个对象的引用，这种情况下，这个本地引用会被存储到栈中，但是对象本身仍然存储在堆区。
     * 对于一个对象的成员方法，这些方法中包含本地变量，仍需要存储在栈区，即使它们所属的对象在堆区。 对于一个对象的成员变量，不管它是原始类型还是包装类型，都会被存储到堆区。
     * 
     * Static类型的变量以及类本身相关信息都会随着类本身存储在堆区。
     * 
     * 堆中的对象可以被多线程共享。 如果一个线程获得一个对象的应用，它便可访问这个对象的成员变量。
     * 如果两个线程同时调用了同一个对象的同一个方法，那么这两个线程便可同时访问这个对象的成员变量，但是对于本地变量，每个线程都会拷贝一份到自己的线程栈中。
     * 
     * 
     */
    void JVM对Java内存模型的实现();

    /**
     * <h2>硬件内存架构</h2>
     * <p>
     * 现代计算机一般都有2个以上CPU，而且每个CPU还有可能包含多个核心。因此，如果我们的应用是多线程的话，这些线程可能会在各个CPU核心中并行运行。
     * 
     * 在CPU内部有一组CPU寄存器，也就是CPU的储存器。CPU操作寄存器的速度要比操作计算机主存快的多。在主存和CPU寄存器之间还存在一个CPU缓存，CPU操作CPU缓存的速度快于主存但慢于CPU寄存器。
     * 某些CPU可能有多个缓存层（一级缓存和二级缓存）。计算机的主存也称作RAM，所有的CPU都能够访问主存，而且主存比上面提到的缓存和寄存器大很多。
     * 
     * 当一个CPU需要访问主存时，会先读取一部分主存数据到CPU缓存，进而在读取CPU缓存到寄存器。当CPU需要写数据到主存时，同样会先flush寄存器到CPU缓存，然后再在某些节点把缓存数据flush到主存。
     */
    void 硬件内存架构();

    /**
     * <h2>Java内存模型和硬件架构之间的桥接</h2>
     * <p>
     * Java内存模型和硬件内存架构并不一致。硬件内存架构中并没有区分栈和堆，从硬件上看，不管是栈还是堆，大部分数据都会存到主存中，当然一部分栈和堆的数据也有可能会存到CPU寄存器中。
     * 当对象和变量存储到计算机的各个内存区域时，必然会面临一些问题，其中最主要的两个问题是：
     * <li>1. 共享对象对各个线程的可见性
     * <p>
     * 当多个线程同时操作同一个共享对象时，如果没有合理的使用volatile和synchronization关键字，一个线程对共享对象的更新有可能导致其它线程不可见。
     * 想象一下我们的共享对象存储在主存，一个CPU中的线程读取主存数据到CPU缓存，然后对共享对象做了更改，但CPU缓存中的更改后的对象还没有flush到主存，
     * 此时线程对共享对象的更改对其它CPU中的线程是不可见的。最终就是每个线程最终都会拷贝共享对象，而且拷贝的对象位于不同的CPU缓存中。 要解决共享对象可见性这个问题，我们可以使用java volatile关键字。
     * volatile关键字可以保证变量会直接从主存读取，而对变量的更新也会直接写到主存。volatile原理是基于CPU内存屏障指令实现的。
     * 
     * <li>2. 共享对象的竞争现象
     * <p>
     * 如果多个线程共享一个对象，如果它们同时修改这个共享对象，这就产生了竞争现象。要解决上面的问题我们可以使用java synchronized代码块。
     * synchronized代码块可以保证同一个时刻只能有一个线程进入代码竞争区，synchronized代码块也能保证代码块中所有变量都将会从主存中读，当线程退出代码块时，对所有变量的更新将会flush到主存，不管这些变量是不是volatile类型的。
     * 
     */
    void Java内存模型和硬件架构之间的桥接();

    /**
     * <h2>支撑Java内存模型的基础原理</h2> 认识几个基础概念：内存屏障（memory Barriers），指令重排序，happens-before规则，as-if-serial语义。
     * <h3>指令重排序</h3>
     * <p>
     * 
     * 在执行程序时，为了提高性能，编译器和处理器会对指令做重排序。但是，JMM确保在不同的编译器和不同的处理器平台之上，通过插入特定类型的Memory
     * Barrier来禁止特定类型的编译器重排序和处理器重排序，为上层提供一致的内存可见性保证。
     * <ul>
     * <li>编译器优化重排序：编译器在不改变单线程程序语义的前提下，可以重新安排语句的执行顺序。
     * <li>指令级并行的重排序：如果不存在数据依赖性，处理器可以改变语句对应机器指令的执行顺序。
     * <li>内存系统的重排序：处理器使用缓存和读写缓冲区，这使得加载和存储操作看上去可能是在乱序执行。
     * </ul>
     * <h3>数据依赖性</h3>
     * <p>
     * 
     * 如果两个操作访问同一个变量，其中一个为写操作，此时这两个操作之间存在数据依赖性。 编译器和处理器不会改变存在数据依赖性关系的两个操作的执行顺序，即不会重排序。
     * 
     * <h3>as-if-serial</h3>
     * 
     * 不管怎么重排序，单线程下的执行结果不能被改变，编译器、runtime和处理器都必须遵守as-if-serial语义。
     * 
     * <h3>内存屏障（Memory Barrier ）</h3>
     * <p>
     * 上面讲到了，通过内存屏障可以禁止特定类型处理器的重排序，从而让程序按我们预想的流程去执行。内存屏障，又称内存栅栏，是一个CPU指令，基本上它是一条这样的指令：
     * <ol>
     * <li>保证特定操作的执行顺序。
     * <li>影响某些数据（或则是某条指令的执行结果）的内存可见性。
     * </ol>
     * 编译器和CPU能够重排序指令，保证最终相同的结果，尝试优化性能。插入一条Memory Barrier会告诉编译器和CPU：不管什么指令都不能和这条Memory Barrier指令重排序。
     * 
     * Memory Barrier所做的另外一件事是强制刷出各种CPU cache，如一个Write-Barrier（写入屏障）将刷出所有在Barrier之前写入 cache
     * 的数据，因此，任何CPU上的线程都能读取到这些数据的最新版本。
     * 
     * 这和java有什么关系？上面java内存模型中讲到的volatile是基于Memory Barrier实现的。
     * 
     * 如果一个变量是volatile修饰的，JMM会在写入这个字段之后插进一个Write-Barrier指令，并在读这个字段之前插入一个Read-Barrier指令。这意味着，如果写入一个volatile变量，就可以保证：
     * <ol>
     * <li>一个线程写入变量a后，任何线程访问该变量都会拿到最新值。
     * <li>在写入变量a之前的写入操作，其更新的数据对于其他线程也是可见的。因为Memory Barrier会刷出cache中的所有先前的写入。
     * </ol>
     * <h3>happens-before</h3>
     * <p>
     * 
     * 从jdk5开始，java使用新的JSR-133内存模型，基于happens-before的概念来阐述操作之间的内存可见性。
     * 
     * 在JMM中，如果一个操作的执行结果需要对另一个操作可见，那么这两个操作之间必须要存在happens-before关系，这个的两个操作既可以在同一个线程，也可以在不同的两个线程中。
     * 
     * 与程序员密切相关的happens-before规则如下：
     * <ol>
     * <li>程序顺序规则：一个线程中的每个操作，happens-before于该线程中任意的后续操作。
     * <li>监视器锁规则：对一个锁的解锁操作，happens-before于随后对这个锁的加锁操作。
     * <li>volatile域规则：对一个volatile域的写操作，happens-before于任意线程后续对这个volatile域的读。
     * <li>传递性规则：如果 A happens-before B，且 B happens-before C，那么A happens-before C。
     * </ol>
     * 注意：两个操作之间具有happens-before关系，并不意味前一个操作必须要在后一个操作之前执行！仅仅要求前一个操作的执行结果，对于后一个操作是可见的，且前一个操作按顺序排在后一个操作之前。
     */
    void 支撑Java内存模型的基础原理();

}
