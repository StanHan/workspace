package demo.java.sql;

import java.sql.Connection;

/**
 * 
 * 
 *
 */
public class ConnectionDemo {

    /**
     * 事务的四大特性（ACID）:
     * <ol>
     * <li>原子性（Atomicity）：原子性是指事务包含的所有操作要么全部成功，要么全部失败回滚。
     * 
     * <li>一致性（Consistency） 一致性是指事务必须使数据库从一个一致性状态变换到另一个一致性状态，也就是说一个事务执行之前和执行之后都必须处于一致性状态。
     * 
     * <li>隔离性（Isolation） 隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。
     * 即要达到这么一种效果：对于任意两个并发的事务T1和T2，在事务T1看来，T2要么在T1开始之前就已经结束，要么在T1结束之后才开始，这样每个事务都感觉不到有其他事务在并发地执行。
     * 
     * <li>持久性（Durability） 持久性是指一个事务一旦被提交了，那么对数据库中的数据的改变就是永久性的，即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作。
     * </ol>
     * 如果不考虑事务的隔离性，会发生的几种问题：
     * <ul>
     * <li>脏读: 脏读是指在一个事务处理过程里读取了另一个未提交的事务中的数据。
     * <li>不可重复读: 不可重复读是指在对于数据库中的某个数据，一个事务范围内多次查询却返回了不同的数据值，这是由于在查询间隔，被另一个事务修改并提交了。
     * <li>虚读(幻读):
     * 幻读是事务非独立执行时发生的一种现象。例如事务T1对一个表中所有的行的某个数据项做了从“1”修改为“2”的操作，这时事务T2又对这个表中插入了一行数据项，而这个数据项的数值还是为“1”并且提交给数据库。而操作事务T1的用户如果再查看刚刚修改的数据，会发现还有一行没有修改，其实这行是从事务T2中添加的，就好像产生幻觉一样，这就是发生了幻读。
     * </ul>
     * 
     * MySQL数据库为我们提供的四种隔离级别：
     * <ol>
     * <li>Serializable (串行化)：可避免脏读、不可重复读、幻读的发生。
     * <li>Repeatable read (可重复读)：可避免脏读、不可重复读的发生。
     * <li>Read committed (读已提交)：可避免脏读的发生。
     * <li>Read uncommitted (读未提交)：最低级别，任何情况都无法保证。
     * </ol>
     * 以上四种隔离级别最高的是Serializable级别，最低的是Read uncommitted级别，当然级别越高，执行效率就越低。
     * 像Serializable这样的级别，就是以锁表的方式(类似于Java多线程中的锁)使得其他的线程只能在锁外等待，所以平时选用何种隔离级别应该根据实际情况。
     * 
     * 在MySQL数据库中默认的隔离级别为Repeatable read(可重复读)。 而在Oracle数据库中，只支持Serializable (串行化)级别和Read committed
     * (读已提交)这两种级别，其中默认的为Read committed级别。
     */
    static void demoTransaction(Connection connection) {

    }
}
